import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fsExtra from "fs-extra";
const { copyFileSync, ensureDirSync, existsSync } = fsExtra;
import { zip } from "zip-a-folder";
import path from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const outputDir = "Obsidian-Sync-to-Notion";
const outputZip = `${outputDir}.zip`;
const outputFiles = ["main.js", "manifest.json", "styles.css"];

esbuild
  .build({
    banner: {
      js: banner,
    },
    entryPoints: ["main.ts"],
    bundle: true,
    external: [
      "obsidian",
      "electron",
      "@codemirror/autocomplete",
      "@codemirror/collab",
      "@codemirror/commands",
      "@codemirror/language",
      "@codemirror/lint",
      "@codemirror/search",
      "@codemirror/state",
      "@codemirror/view",
      "@lezer/common",
      "@lezer/highlight",
      "@lezer/lr",
      ...builtins,
    ],
    format: "cjs",
    watch: !prod,
    target: "es2018",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "main.js",
  })
  .then(async () => {
    console.log("✅ Build concluído.");

    // Cria pasta destino
    ensureDirSync(outputDir);

    // Copia arquivos
    for (const file of outputFiles) {
      if (existsSync(file)) {
        copyFileSync(file, path.join(outputDir, file));
        console.log(`📁 Copiado: ${file}`);
      } else {
        console.warn(`⚠️ Arquivo não encontrado: ${file}`);
      }
    }

    // Cria o .zip
    await zip(outputDir, outputZip);
    console.log(`📦 Criado: ${outputZip}`);
  })
  .catch((error) => {
    console.error("❌ Build failed:", error);
    process.exit(1);
  });
